import os
import numpy as np
import pandas as pd
import pickle

import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

from collections import defaultdict

class File:
   
    def __init__(self, file, label):
        self.name = file
        self.devices = []
        self.times = []
        self.products = []
        self.logs = []
        self.label = label
        self.dataset = 'test' if label == -1 else 'train' 
    
    def extend(self, device, time, product, log):
        self.devices.extend([device])
        self.times.extend([time])
        self.products.extend([product])
        self.logs.extend([log])

    def __hash__(self):
        return hash(self.name)
    
    def __eq__(self, target):
        return isinstance(target, File) and self.name == target.name
    
class Estimator:
   
    def __init__(self, name):
        self.name = name
        self.files = defaultdict(list)
        self.unique_files = defaultdict(set)
        
        self.file_count = dict()
        self.file_count[-1] = 0
        self.file_count[0] = 0
        self.file_count[1] = 0
         
        self.unique_file_count = dict()
        self.unique_file_count[-1] = 0
        self.unique_file_count[0] = 0
        self.unique_file_count[1] = 0
        
    def extend(self, file):
        self.file_count[file.label] += 1
        self.files[file.label].extend([file])
        if file not in self.unique_files[file.label]:
            self.unique_file_count[file.label] += 1
            self.unique_files[file.label].add(file)

    def __hash__(self):
        return hash(self.name)
    
    def __eq__(self, target):
        return isinstance(target, File) and self.name == target.name
    
    def __gt__(self, target):
        return isinstance(target, Estimator) and \
               self.unique_file_count[-1] + self.unique_file_count[0] + self.unique_file_count[1] > \
               target.unique_file_count[-1] + target.unique_file_count[0] + target.unique_file_count[1]

print('reading labels for training set...')
labels = pd.read_csv('./data/training-set.csv', names=['file', 'label'], header=None)
labels = labels.set_index(['file'])
labels = labels.to_dict()['label']

with open('./data/min_time.pickle', 'rb') as time_pickle:
    min_time = pickle.load(time_pickle)

total_files = dict()
total_devices = dict()
total_products = dict()

log_names = list()

logs_csv = os.listdir('./data/query_log/')
for i, log_name in enumerate(logs_csv):
    
    log_names.append(log_name)
    
    if i % 4 == 0 and i != 0:
        print('')
    print(log_name, end='\t')
  
    with open('./data/query_log/' + log_name, 'r') as log_file:
        for j, line in enumerate(log_file):
            data = line.rstrip().split(',')
            
            time = (int(data[2]) - min_time[log_name])
            file_name = data[0]
            device_name = data[1]
            product_name = data[3]
            
            label = labels[file_name] if file_name in labels else -1

            if file_name not in total_files:
                total_files[file_name] = File(file_name, label)
                
            if device_name not in total_devices:
                total_devices[device_name] = Estimator(device_name)
            
            if product_name not in total_products:
                total_products[product_name] = Estimator(product_name)
            
            file = total_files[file_name]
            device = total_devices[device_name]
            product = total_products[product_name]
            
            file.extend(device, time, product, log_name)
            device.extend(file)
            product.extend(file)
            
retain_devices_list = list()
for device in total_devices.values():
    if device.unique_file_count[0] + device.unique_file_count[1] != 0 and device.unique_file_count[-1] != 0 and \
       device.unique_file_count[0] > 100 or device.unique_file_count[1] > 100 or device.unique_file_count[-1] > 100:
        retain_devices_list.append(device)
retain_devices_list = sorted(retain_devices_list, reverse=True)
retain_devices_list = retain_devices_list[0:100]
devices_name = list()
for device in retain_devices_list:
    devices_name.append(device.name)

i = 0 
instance_list = list()
products_name = list(total_products.keys())
for file_name, file in total_files.items():
    if i % 5000 == 0 and i != 0:
        print(i)
    i += 1

    feature_list = [file_name, len(file.devices), len(set(file.devices)), len(set(file.products))]
    
    # instance precision and instance devices
    one = zero = 0
    for device in file.devices:
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += device.file_count[1]
            zero += device.file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    # file precision and instance devices
    one = zero = 0
    for device in file.devices:
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += device.unique_file_count[1]
            zero += device.unique_file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    # instance precision and file devices
    one = zero = 0
    for device in set(file.devices):
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += device.file_count[1]
            zero += device.file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    # file precision and file devices
    one = zero = 0
    for device in set(file.devices):
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += device.unique_file_count[1]
            zero += device.unique_file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    
    # instance precision and instance products
    one = zero = 0
    for product in file.products:
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += product.file_count[1]
            zero += product.file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    # file precision and instance products
    one = zero = 0
    for product in file.products:
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += product.unique_file_count[1]
            zero += product.unique_file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    # instance precision and file products
    one = zero = 0
    for product in set(file.products):
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += product.file_count[1]
            zero += product.file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    # file precision and file products
    one = zero = 0
    for product in set(file.products):
         if device.file_count[1] + device.file_count[0] != 0 and device.file_count[-1] != 0:
            one += product.unique_file_count[1]
            zero += product.unique_file_count[0]
    if zero + one == 0:
        one = zero = 1
    feature_list.extend([zero /(zero + one)])
    
    feature_list.extend([np.mean(file.times)])
    
    # logs one-hot encoding
    logs_one_hot = [0] * 92
    for log_name in file.logs:
        index = log_names.index(log_name)
        logs_one_hot[index] += 1
    feature_list.extend(logs_one_hot)
    
    # products one-hot encoding    
    products_one_hot = [0] * 28
    for product in file.products:
        index = products_name.index(product.name)
        products_one_hot[index] += 1
    feature_list.extend(products_one_hot)
    
    # time one-hot encoding    
    times_one_hot = [0] * 24
    for time in file.times:
        times_one_hot[time // 3600] += 1
    feature_list.extend(times_one_hot)
    
    # devices one-hot encoding
    device_one_hot = [0] * 100
    for device in file.devices:
        try:
            index = devices_name.index(device.name)
            device_one_hot[index] += 1
        except:
            continue
    feature_list.extend(device_one_hot)
    
    instance_list.append(feature_list)
    
instance_list = np.array(instance_list)

header = ['file', '#_of_instance', '#_of_devices', '#_of_products', 
          'precision_i_device_i', 'precision_f_device_i', 
          'precision_i_device_f', 'precision_f_device_f', 
          'precision_i_product_i', 'precision_f_product_i',
          'precision_i_product_f', 'precision_f_product_f',
          'mean_time'] + log_names + products_name + list(range(0, 24)) + devices_name

dataset = pd.DataFrame(instance_list, columns=header)
train = pd.read_csv('./data/training-set.csv', names=['file', 'label'], header=0)
test = pd.read_csv('./data/testing-set.csv', names=['file', 'prob'], header=0)
train_features = pd.merge(dataset, train, on='file', how='inner')
test_features = pd.merge(dataset, test, on='file', how='inner')
train_features.to_csv('./data/train_features.tsv', sep='\t', index=False)
test_features.to_csv('./data/test_features.tsv', sep='\t', index=False)
print('done')